method.insert = cfg.basedir,  private|const|string, (cat,"/home/ian/rtorrent/")
method.insert = cfg.logs,     private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.download, private|const|string, (cat,(cfg.basedir),"downloads/")
method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
method.insert = cfg.torrents, private|const|string, (cat,(cfg.basedir),"torrents/")
execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.download),"\" ",\
    "\"",(cfg.logs),"\" ",\
    "\"",(cfg.session),"\" ",\
    "\"",(cfg.torrents),"\"")

schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.torrents), "*.torrent")))

# Maximum and minimum number of peers to connect to per torrent.
#
#throttle.min_peers.normal.set = 40
throttle.max_peers.normal.set = 1024

# Same as above but for seeding completed torrents.
# "-1" = same as downloading.
#
throttle.min_peers.seed.set = 10

# Maximum number of simultaneous uploads per torrent.
#
throttle.max_uploads.set = 150

# Global upload and download rate in KiB.
# "0" for unlimited.
#
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb = 10000

# Default directory to save the downloaded torrents.
#
directory.default.set = (cfg.download)

# Default session directory. Make sure you don't run multiple instance
# of rTorrent using the same session directory. Perhaps using a
# relative path?
#
session.path.set = (cfg.session)


# Close torrents when disk-space is low.
#
#schedule2 = low_diskspace,5,60,close_low_diskspace=100M

# The IP address reported to the tracker.
#
#network.local_address.set = 127.0.0.1
#network.local_address.set = rakshasa.no

# The IP address the listening socket and outgoing connections is
# bound to.
#
#network.bind_address.set = 127.0.0.1
#network.bind_address.set = rakshasa.no

# Port range to use for listening.
#
network.port_range.set = 50000-60000

# Start opening ports at a random position within the port range.
#
network.port_random.set = yes

# Check hash for finished torrents. Might be useful until the bug is
# fixed that causes lack of disk-space not to be properly reported.
#
pieces.hash.on_completion.set = yes

# Set whether the client should try to connect to UDP trackers.
#
trackers.use_udp.set = yes
#trackers.numwant.set = 80

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plain-text to RC4 encryption after the encrypted handshake.
#
protocol.encryption.set = allow_incoming,enable_retry,try_outgoing

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht.mode.set = auto

# UDP port to use for DHT.
#
dht.port.set = 6881

# Peer exchange
protocol.pex.set = yes

network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300
pieces.memory.max.set = 2000M
network.xmlrpc.size_limit.set = 4M

# Enable peer exchange (for torrents not marked private).
#
protocol.pex.set = yes

# Set download list layout style ("full", "compact").
#
ui.torrent_list.layout.set = "full"

encoding.add = utf8

# Run rTorrent as a daemon, controlled via XMLRPC.
#
#system.daemon.set = false

print = (cat, "Logging to ", (cfg.logfile))

log.open_file = "log", (cfg.logfile)
log.add_output = "info", "log"
log.execute = (cat, (cfg.logs), "execute.log")
